"""
This module exports functions used to execute code generated by the model safely.
"""

import json

from textwrap import dedent
from microsandbox import PythonSandbox
from collections.abc import Callable

sandbox = None
context = None


async def create_sandbox():
    global sandbox, context

    if sandbox is None:
        context = PythonSandbox.create(name="gemma3")
        sandbox = await context.__aenter__()


async def cleanup_sandbox():
    global sandbox, context

    if context is not None:
        await context.__aexit__(None, None, None)

        sandbox = None
        context = None


async def define_function(name: str, code: str) -> Callable:
    if not sandbox:
        raise Exception("Call `create_sandbox()` first, and `cleanup_sandbox()` after.")

    runner = await sandbox.run(code)
    errors = await runner.error()

    if errors:
        print("Caught errors during definition:", errors)
        raise Exception(f"Function definition produced runtime errors: {errors}")

    async def sandboxed_function(**kwargs):
        return await execute_function(name, kwargs)

    return sandboxed_function


async def execute_function(name: str, params: dict) -> dict:
    if not sandbox:
        raise Exception("Call `create_sandbox()` first, and `cleanup_sandbox()` after.")

    args = ", ".join([f"{key}={repr(val)}" for key, val in params.items()])
    code = dedent(f"""
        import json

        try:
            print(json.dumps({{
                "result": {name}({args})
            }}))
        except Exception as error:
            print(json.dumps({{
                "error": {{
                    "name": type(error).__name__,
                    "message": str(error)
                }}
            }}))
    """)

    runner = await sandbox.run(code)
    output = await runner.output()
    errors = await runner.error()

    if errors:
        print("Caught errors during execution:", errors)
        raise Exception(f"Function execution produced runtime errors: {errors}")

    try:
        return json.loads(output)
    except Exception as error:
        raise Exception(f"Failed to execute function: {str(error)}")
